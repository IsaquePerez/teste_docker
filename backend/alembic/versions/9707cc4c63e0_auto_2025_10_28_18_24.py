"""Auto: 2025-10-28 18:24

Revision ID: 9707cc4c63e0
Revises: 
Create Date: 2025-10-28 18:24:27.049753

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9707cc4c63e0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - CORRIGIDO MANUALMENTE ###

    # Nível 0: Tabelas sem dependências
    op.create_table('niveis_acesso',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nome', postgresql.ENUM('admin', 'user', name='nivel_acesso_enum'), nullable=False),
    sa.Column('descricao', sa.Text(), nullable=True),
    sa.Column('permissoes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_niveis_acesso_id'), 'niveis_acesso', ['id'], unique=False)

    op.create_table('sistemas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nome', sa.String(length=255), nullable=False),
    sa.Column('descricao', sa.Text(), nullable=True),
    sa.Column('ativo', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sistemas_id'), 'sistemas', ['id'], unique=False)

    # Nível 1: Dependem do Nível 0
    op.create_table('modulos',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sistema_id', sa.Integer(), nullable=False),
    sa.Column('nome', sa.String(length=255), nullable=False),
    sa.Column('descricao', sa.Text(), nullable=True),
    sa.Column('ordem', sa.Integer(), nullable=True),
    sa.Column('ativo', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['sistema_id'], ['sistemas.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_modulos_id'), 'modulos', ['id'], unique=False)

    op.create_table('usuarios',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nome', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('senha_hash', sa.String(length=255), nullable=False),
    sa.Column('nivel_acesso_id', sa.Integer(), nullable=False),
    sa.Column('ativo', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['nivel_acesso_id'], ['niveis_acesso.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usuarios_email'), 'usuarios', ['email'], unique=True)
    op.create_index(op.f('ix_usuarios_id'), 'usuarios', ['id'], unique=False)

    # Nível 2: Dependem do Nível 1
    op.create_table('projetos',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nome', sa.String(length=255), nullable=False),
    sa.Column('modulo_id', sa.Integer(), nullable=False),
    sa.Column('sistema_id', sa.Integer(), nullable=False),
    sa.Column('responsavel_id', sa.Integer(), nullable=True),
    sa.Column('descricao', sa.Text(), nullable=True),
    sa.Column('status', postgresql.ENUM('ativo', 'pausado', 'finalizado', name='status_projeto_enum'), nullable=True),
    sa.Column('metricas', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['modulo_id'], ['modulos.id'], ),
    sa.ForeignKeyConstraint(['responsavel_id'], ['usuarios.id'], ),
    sa.ForeignKeyConstraint(['sistema_id'], ['sistemas.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_projetos_id'), 'projetos', ['id'], unique=False)

    # Nível 3: Quebrando a dependência circular
    
    # 1. Criar 'ciclos_teste' PRIMEIRO, mas SEM a FK para 'casos_teste'
    op.create_table('ciclos_teste',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('casos_teste_id', sa.Integer(), nullable=False), # Coluna é criada
    sa.Column('nome', sa.String(length=255), nullable=True),
    sa.Column('numero', sa.Integer(), nullable=True),
    sa.Column('descricao', sa.Text(), nullable=True),
    sa.Column('data_inicio', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('data_fim', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('status', postgresql.ENUM('planejado', 'em_execucao', 'concluido', 'pausado', 'cancelado', 'erro', name='status_ciclo_enum'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    # sa.ForeignKeyConstraint(['casos_teste_id'], ['casos_teste.id'], ), # FK REMOVIDA TEMPORARIAMENTE
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ciclos_teste_id'), 'ciclos_teste', ['id'], unique=False)

    # 2. Criar 'casos_teste' (agora 'ciclos_teste' existe)
    op.create_table('casos_teste',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ciclo_teste_id', sa.Integer(), nullable=False),
    sa.Column('projeto_id', sa.Integer(), nullable=False),
    sa.Column('nome', sa.String(length=255), nullable=False),
    sa.Column('descricao', sa.Text(), nullable=True),
    sa.Column('passos', sa.Text(), nullable=True),
    sa.Column('criterios_aceitacao', sa.Text(), nullable=True),
    sa.Column('prioridade', postgresql.ENUM('alta', 'media', 'baixa', name='prioridade_caso_teste_enum'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['ciclo_teste_id'], ['ciclos_teste.id'], ), # OK
    sa.ForeignKeyConstraint(['projeto_id'], ['projetos.id'], ),       # OK
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_casos_teste_id'), 'casos_teste', ['id'], unique=False)
    
    # 3. Adicionar a FK que faltava em 'ciclos_teste' (agora 'casos_teste' existe)
    op.create_foreign_key(
        'fk_ciclos_teste_casos_teste_id', # Nome da constraint (pode ser qualquer nome)
        'ciclos_teste', 'casos_teste',
        ['casos_teste_id'], ['id']
    )

    # Nível 4: Dependem do Nível 3
    op.create_table('registro_tentativa_teste',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('caso_teste_id', sa.Integer(), nullable=False),
    sa.Column('usuario_id', sa.Integer(), nullable=False),
    sa.Column('numero_tentativa', sa.Integer(), nullable=False),
    sa.Column('resultado', sa.Boolean(), nullable=False),
    sa.Column('evidencias', sa.Text(), nullable=True),
    sa.Column('data_execucao', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['caso_teste_id'], ['casos_teste.id'], ),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_registro_tentativa_teste_id'), 'registro_tentativa_teste', ['id'], unique=False)

    op.create_table('metricas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('projeto_id', sa.Integer(), nullable=False),
    sa.Column('ciclo_teste_id', sa.Integer(), nullable=True),
    sa.Column('tipo_metrica', postgresql.ENUM('cobertura', 'eficiencia', 'defeitos', 'qualidade', 'produtividade', name='tipo_metrica_enum'), nullable=False),
    sa.Column('casos_reprovados', sa.Integer(), nullable=False),
    sa.Column('casos_executados', sa.Integer(), nullable=False),
    sa.Column('casos_aprovados', sa.Integer(), nullable=False),
    sa.Column('tempo_medio_resolucao', sa.Integer(), nullable=True),
    sa.Column('data_medicao', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('nome_metrica', sa.String(length=255), nullable=False),
    sa.Column('valor_metrica', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('unidade_medida', sa.String(length=255), nullable=True),
    sa.Column('descricao', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['ciclo_teste_id'], ['ciclos_teste.id'], ),
    sa.ForeignKeyConstraint(['projeto_id'], ['projetos.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_metricas_id'), 'metricas', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - CORRIGIDO MANUALMENTE ###
    op.drop_index(op.f('ix_metricas_id'), table_name='metricas')
    op.drop_table('metricas')
    op.drop_index(op.f('ix_registro_tentativa_teste_id'), table_name='registro_tentativa_teste')
    op.drop_table('registro_tentativa_teste')
    
    # Remover a FK que adicionamos manualmente
    op.drop_constraint('fk_ciclos_teste_casos_teste_id', 'ciclos_teste', type_='foreignkey')

    op.drop_index(op.f('ix_casos_teste_id'), table_name='casos_teste')
    op.drop_table('casos_teste')
    op.drop_index(op.f('ix_ciclos_teste_id'), table_name='ciclos_teste')
    op.drop_table('ciclos_teste')
    
    op.drop_index(op.f('ix_projetos_id'), table_name='projetos')
    op.drop_table('projetos')
    op.drop_index(op.f('ix_usuarios_id'), table_name='usuarios')
    op.drop_index(op.f('ix_usuarios_email'), table_name='usuarios')
    op.drop_table('usuarios')
    op.drop_index(op.f('ix_modulos_id'), table_name='modulos')
    op.drop_table('modulos')
    op.drop_index(op.f('ix_sistemas_id'), table_name='sistemas')
    op.drop_table('sistemas')
    op.drop_index(op.f('ix_niveis_acesso_id'), table_name='niveis_acesso')
    op.drop_table('niveis_acesso')
    # ### end Alembic commands ###
